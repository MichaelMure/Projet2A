#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{listings}
\lstset{language=Python}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language french
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Simulation de quadricoptère avec Blender"
\pdf_author "Benoît Saccomano & Michael Muré"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\rightmargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Simulation de quadricoptère avec Blender
\end_layout

\begin_layout Author
Benoît Saccomano & Michael Muré
\end_layout

\begin_layout Date
27/05/2011
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Dans le cadre de notre projet nous avons été amenés à modéliser en 3D un
 
\begin_inset CommandInset href
LatexCommand href
name "quadricoptère de la marque Parrot"
target "http://ardrone.parrot.com/parrot-ar-drone/fr/"

\end_inset

™ sous Blender™.
 Ce document a pour but d'expliciter les différentes étapes que nous avons
 suivi afin de réaliser ce travail.
 
\end_layout

\begin_layout Standard
Dans un premier temps on reviendra sur la modélisation (au sens graphique)
 du modèle.
 Ensuite on décrira la méthode suivie afin d'intégrer à ce modèle un comportemen
t physique 
\begin_inset Quotes fld
\end_inset

primitif
\begin_inset Quotes frd
\end_inset

, c'est à dire qui permet de commander indépendament les 4 moteurs.
 
\end_layout

\begin_layout Standard
On reviendra enfin sur les différentes extensions que nous avons ajoutées,
 à savoir un HUD (
\shape italic
head's up display
\shape default
), un comportement plus évolué et la possibilité de contrôler le quadricoptère
 à l'aide d'un joystick.
\end_layout

\begin_layout Standard
Quelques petites précisions supplémentaires avant de commencer : nous avons
 utilisé la version 2.57 de Blender, le design du modèle que nous avons pris
 est celui du drone vendu par Parroy™, le contrôle de ce modèle est apporté
 dans le moteur de jeu de Blender™ via des scripts (en Python) écrits par
 nos soins, en combinaison avec le moteur physique interne de Blender™,
 Bullet.
\end_layout

\begin_layout Section
Modélisation
\end_layout

\begin_layout Standard
Nous avons modélisé le quadricoptère grâce à Blender.
 Comme le modèle est symétrique, nous avons utilisé un outil de miroir (
\shape italic
modifier mirror
\shape default
), qui permet de ne modéliser qu'une moitié du modèle.
 La modélisation a été faite à partir d'une photo vue de dessus, trouvée
 dans un moteur de recherche.
 Nous avons mis cette photo en image de fond dans Blender, et modélisé par
 dessus pour avoir les bonnes proportions.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename modifier.png
	scale 50
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Standard
Le modèle final complet (les deux cotés) comporte 652 points (vertices),
 et 668 faces, ce qui est assez léger pour un affichage en temps réel.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename tex_modele.png
	width 100text%

\end_inset


\end_layout

\begin_layout Standard
Nous avons ensuite déplié en 2D, c'est à dire que pour chaque point du modèle
 est associée une coordonnée en 2D dans l'espace de la texture.
 Ces coordonnées s'appellent les coordonnées UV.
 Pour faire cela, le principe est de marquer certaines arrêtes (
\shape italic
edge
\shape default
) du maillage comme étant des coutures (
\shape italic
seam
\shape default
).
 Ces coutures sont visibles en rouge sur la capture d'écran suivante.
 Le dépliage se fait ensuite grâce à un algorithme interne de Blender qui
 va déplier (unwrap) au mieux ces surfaces.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename couture.png
	width 100text%

\end_inset


\end_layout

\begin_layout Standard
Une fois le dépliage terminé, nous avons texturé le modèle.
 Ce texturage s'est fait en 3 étapes.
\end_layout

\begin_layout Enumerate
Nous avons projeté la photo vue de dessus du modèle réel sur le modèle virtuel
 grâce à Blender.
 Cela nous a permis d'obtenir les décorations du dessus du modèle facilement,
 déformées de la bonne façon pour coller à notre dépliage.
\end_layout

\begin_layout Enumerate
Nous avons ensuite complété la texture grâce au logiciel de traitement d'image
 The Gimp.
 Nous avons utilisé notamment l'outil de clonage pour dupliquer la texture
 de polystyrène noir partout où c'était nécessaire.
\end_layout

\begin_layout Enumerate
Nous avons calculé l'ombrage que le modèle fait sur lui même (
\shape italic
ambient occlusion
\shape default
).
 C'est à dire que certaines parties du modèle en cachent d'autres, ce qui
 crée des zones plus sombres que les autres.
 Blender permet de projeter sur une texture ces zones d'ombre, que nous
 avons ensuite combinées au reste de la texture.
 Cela permet d'avoir un peu plus de réalisme pour un coût complètement nul
 au rendu.
\end_layout

\begin_layout Standard
La capture d'écran suivante présente la texture finale avec les différentes
 couches, ainsi que le dépliage du modèle.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename tex_UV.png
	width 100text%

\end_inset


\end_layout

\begin_layout Section
Contenu de la scène
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename scene.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
La scène finale comporte plusieurs objets:
\end_layout

\begin_layout Itemize
Le modèle du quadricoptère (Quadri)
\end_layout

\begin_layout Itemize
Un niveau basique où évolue le modèle (Level)
\end_layout

\begin_layout Itemize
Une caméra
\end_layout

\begin_layout Itemize
Un ensemble d'objets parenté à la caméra qui sert à afficher le HUD, que
 nous détaillerons plus loin.
\end_layout

\begin_layout Itemize
Un modèle haute résolution du quadricoptère (Quadri.high), qui n'est pas
 utilisé actuellement.
\end_layout

\begin_layout Itemize
Un modèle ultra-simplifié du quadricoptère (32 points, 30 faces), qui est
 utilisé comme modèle de collision pour le moteur physique (non actif actuelleme
nt).
\end_layout

\begin_layout Section
Simulation physique du quadricoptère
\end_layout

\begin_layout Subsection
Principe global
\end_layout

\begin_layout Standard
Afin de pouvoir donner son comportement au modèle dans le mode de jeu de
 Blender™, il a fallu définir plusieurs types d'objets sur notre modèle
 de quadricoptère.
\end_layout

\begin_layout Itemize
les 
\shape italic
sensors
\shape default
 qui détectent une action sur une entrée et génèrent un évènement.
 Dans notre cas cela correspond aux touches du clavier, ou à un joystick.
\end_layout

\begin_layout Itemize
les 
\shape italic
controller
\shape default
 qui sont le plus souvent des expressions logiques (OR, NAND...) faisant la
 liaison entre les sensor et les controller.
 Dans notre cas, la complexité du comportement nous a poussé à utiliser
 des scripts Python en tant que controller.
\end_layout

\begin_layout Itemize
les 
\shape italic
actuators
\shape default
 qui se chargent de modifier le modèle suivant les paramètres du controller.
 Dans notre cas, ils sont au nombre de 4, un pour chaque moteur du quadricoptère.
\end_layout

\begin_layout Standard
Ces différents éléments sont destinés à être reliés entre eux suivant le
 comportement que l'on souhaite définir.
 Petite précision sur les deux 
\shape italic
sensors
\shape default
 
\begin_inset Quotes fld
\end_inset

Always
\begin_inset Quotes frd
\end_inset

 visiblent sur l'image ci-dessous.
 Le premier est utilisé pour lire le script Python de manière périodique.
 Il est utile dans le cas où l'utilisateur controle le quadricoptère avec
 le joystick puisque celui ci ne transmet que continue les valeurs de ses
 axes (et donc aucun évènement du type 
\begin_inset Quotes fld
\end_inset

touche A pressée
\begin_inset Quotes frd
\end_inset

).
\end_layout

\begin_layout Standard
Le deuxième est relié directement aux 4 
\shape italic
actuator 
\shape default
afin d'activir les 4 moteurs en permanence.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename logic_quadri.png
	width 100text%

\end_inset


\end_layout

\begin_layout Subsection
Comportement simple
\end_layout

\begin_layout Standard
Le but du comportement simple est de pouvoir agir via une touche du clavier
 sur un moteur.
\end_layout

\begin_layout Standard
Nous avons donc défini une variable pour chaque force appliquée à chaque
 moteur.
\end_layout

\begin_layout Standard
Ainsi nous avons 2 parties distinctes dans notre code pour gérer ce comportement.
\end_layout

\begin_layout Standard
Une qui détecte une pression sur une des 4 touches et qui incrémente la
 force correspondante.
\end_layout

\begin_layout Standard
La deuxième partie consiste à affecter les 4 forces au modèle.
 Il faut préciser qu'avec Blender™, toutes les forces s'appliquent, par
 défaut, au centre de gravité de l'objet considéré.
 Pour remédier à ce problème nous appliquons les moments qui sont nécessaires
 pour 
\begin_inset Quotes fld
\end_inset

déplacer
\begin_inset Quotes frd
\end_inset

 la force au point qui nous intéresse (en l'occurrence la position où se
 trouve le moteur).
\end_layout

\begin_layout Subsection
Comportement évolué
\end_layout

\begin_layout Standard
Le comportement évolué reprend le comportement précédent mais offre la possibili
té de piloter le quadricoptère.
\end_layout

\begin_layout Standard
En effet, nous avons dans ce cas 8 autres touches pour piloter le quadricoptère.
 Mais dans ce cas, une pression sur une touche aura pour effet de modifier
 plusieurs forces à la fois.
\end_layout

\begin_layout Standard
Ainsi on offre la possibilité de tangage et de lacet directement via une
 touche.
\end_layout

\begin_layout Subsection
Joystick
\end_layout

\begin_layout Standard
Le comportement via joystick est légèrement différent de celui au clavier.
\end_layout

\begin_layout Standard
En effet, comme précisé précédemment, le joystick n'envoie pas directement
 des évènements mais juste un tableau de 4 valeurs correspondant aux valeurs
 des axes (3 axes de la manette plus l'axe de la molette des gaz).
\end_layout

\begin_layout Standard
On a donc ajouté un 
\shape italic
sensor
\shape default
 
\begin_inset Quotes fld
\end_inset

Always
\begin_inset Quotes frd
\end_inset

 qui permet de lire en continue les valeurs envoyées par le joystick.
\end_layout

\begin_layout Subsubsection
Zone morte
\end_layout

\begin_layout Standard
Nous avons définit une 
\begin_inset Quotes fld
\end_inset

zone morte
\begin_inset Quotes frd
\end_inset

 , qui permet de rendre le Joystick moins sensible aux variations minimes.
 Cette sensibilité peut être modifiée via la constante THRESHOLD (il est
 à noter que la position d'un axe va de -32768 à 32767).
\end_layout

\begin_layout Subsubsection
Gestion du pilotage
\end_layout

\begin_layout Standard
Le deuxième ajout est une aide au pilotage.
 Concrètement celle-ci consiste à repositionner le quadricoptère dans sa
 position initiale si l'utilisateur lâche le Joystick.
\end_layout

\begin_layout Standard
Pour cela on va récupèrer l'orientation de notre modèle par rapport à l'environn
ement (elle est représentée par une matrice 3x3), puis on applique des forces
 opposées à l'orientation actuelle afin de remettre le quadricoptère dans
 une position 
\begin_inset Quotes eld
\end_inset

neutre
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Section
HUD
\end_layout

\begin_layout Subsection
Principe global
\end_layout

\begin_layout Standard
Le HUD (head's up display) que nous avons implémenté est constitué d'un
 indicateur de vitesse et d'un indicateur d'altitude.
 Le principe est relativement simple.
 Pour chaque indicateur, deux plans sont positionnés parallèlement à la
 caméra et parentés à elle de sorte que si la caméra bouge, les indicateurs
 suivent.
 Ces plans sont texturés avec les deux textures suivantes:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename fondaltimetre.png
	lyxscale 50
	scale 50
	rotateOrigin center

\end_inset

 
\begin_inset Graphics
	filename aiguille.png
	lyxscale 50
	scale 50
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Standard
Les matériaux pour ces deux plans sont un peu particuliers:
\end_layout

\begin_layout Itemize
Activation de la transparence (la texture affecte les canaux color et alpha,
 valeur de alpha par défaut: 0).
\end_layout

\begin_layout Itemize
Matériau en shadeless, c'est à dire pas de calcul d'ombrage ou d'éclairage.
 Seules les couleurs de la texture sont affichées.
\end_layout

\begin_layout Standard
Le centre de l'objet aiguille est placé au niveau de l'axe de rotation de
 l'aiguille, de sorte qu'on ait juste à appliquer une rotation à l'aiguille
 pour fixer la valeur.
 Les afficheurs prennent vie grâce à un script python simple que nous allons
 voir dans la partie suivante.
 Le réseau logique utilisé est le suivant:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename logic_HUD.png
	width 100col%
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Standard
Nous avons donc:
\end_layout

\begin_layout Itemize
Un 
\shape italic
sensor
\shape default
 
\begin_inset Quotes fld
\end_inset

Always
\begin_inset Quotes frd
\end_inset

 qui active le script à intervalles réguliers
\end_layout

\begin_layout Itemize
Un 
\shape italic
controller
\shape default
 
\begin_inset Quotes fld
\end_inset

Python
\begin_inset Quotes frd
\end_inset

 avec notre script
\end_layout

\begin_layout Itemize
Un 
\shape italic
actuator
\shape default
 
\begin_inset Quotes fld
\end_inset

Motion
\begin_inset Quotes frd
\end_inset

 qui ne sert strictement à rien, si ce n'est d'avoir un graphe valide (sinon
 le script ne se déclencherait pas).
\end_layout

\begin_layout Subsection
Script python
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,language=Python,numbers=left"
inline false
status open

\begin_layout Plain Layout

import bge 
\end_layout

\begin_layout Plain Layout

from mathutils import Matrix
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# récupère la scène et la liste des objets
\end_layout

\begin_layout Plain Layout

scene = bge.logic.getCurrentScene()
\end_layout

\begin_layout Plain Layout

List = scene.objects
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# récupère le controleur, puis l'objet aiguille qui détient ce controleur
\end_layout

\begin_layout Plain Layout

cont = bge.logic.getCurrentController()
\end_layout

\begin_layout Plain Layout

aiguille = cont.owner
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# récupère l'objet quadricoptère dans la liste des objets de la scène, puis
 sa vitesse
\end_layout

\begin_layout Plain Layout

value = List['Quadri'].worldLinearVelocity.length
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# affecte une matrice de rotation à l'objet aiguille, calculée d'après la
 valeur à afficher
\end_layout

\begin_layout Plain Layout

aiguille.localOrientation = Matrix.Rotation(-value / 10.0, 4, 'Z').to_3x3()
\end_layout

\end_inset


\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
Notre projet a permis de valider la solution technique de Blender pour la
 simulation, autant par ses capacités à fournir un affichage correct et
 fluide, qu'une simulation physique simple, correcte et extensible.
 Un future projet pour implementer dans le script de contrôle en python
 d'un vrai modèle et d'asservissement devrait aboutir à un comportement
 dans le moteur de jeu proche de la réalité.
\end_layout

\end_body
\end_document
