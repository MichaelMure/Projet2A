<ENCODAGE>utf-8</ENCODAGE>
<TITRE>Quadricoptère sous Blender</TITRE>
<ELEVE>Michael MURE</ELEVE>
<ELEVE>Benoît SACCOMANO</ELEVE>
<ENSEIGNANT>Denis LIENHARDT</ENSEIGNANT>
<CLE>Blender, Quadricopètre, 3D, Modélisation, Python, Bullet, Game Engine, Blender Game, Joystick</CLE>
<SUJET>Simulation d'un quadricoptère avec Blender</SUJET>
<REALISATION>
Le but de ce projet est de fournir une simulation d'<a href="http://ardrone.parrot.com/parrot-ar-drone/fr/">AR.Drone de la marque Parrot</a>, pour permettre à un futur projet d'implémenter un ensemble d'asservissement pour le contrôle du modèle virtuel.
La première étape du projet fut la réalisation d'un modèle 3D du quadricoptère. Le modèle étant symétrique, nous avons notamment utilisé un outil de miroir qui génère automatiquement la moitié du modèle. Nous nous sommes inspirés de différentes images représentant le drone AR Parrot afin de construire un modèle réaliste.
<FIGURE>
	<LEGENDE>Outil miroir de Blender</LEGENDE>
	<FICHIER>miror.jpeg</FICHIER>
</FIGURE>
La seconde étape de modélisation fut l'ajout d'une texture à notre modèle. Pour cela nous avons déplié notre modèle en 2 dimensions. 
<FIGURE>
	<LEGENDE>La texture du quadricoptère</LEGENDE>
	<FICHIER>text.jpeg</FICHIER>
</FIGURE>
Les textures sont définies sur les différentes surfaces qui composent notre quadricoptère. Au final notre modèle complet (les deux moitiés) se compose de 668 faces et 652 points. Pour gérer les collisions du quadricoptère avec l'environnment dans lequel il évolue, un modèle plus léger (32 points et 30 faces) est utilisé.
Nous avons ensuite intégré notre modèle dans une scène qui comporte les deux éléments classiques de Blender : une caméra et une lampe. Puis nous avons construit un "monde" dans lequel notre quadricoptère évolue ainsi qu'un HUD qui nous renseigne sur la vitesse et l'altitude de notre quadricopère.
<FIGURE>
	<LEGENDE>Le quadricoptère dans la scène finale</LEGENDE>
	<FICHIER>quadri.jpeg</FICHIER>
</FIGURE>
Nous avons ensuite implémenté le comportement de notre quadricoptère. Pour cela nous avons utilisé le moteur de jeu de Blender (basé notamment sur le moteur physique Bullet). L'idée de base est d'ajouter des capteurs et de les lier à des modifications sur le modèle. La liaison s'effectue dans notre cas via un script Pyhton. Ce script est notamment composé de 4 variables qui représentent les forces qui résultent de chaque moteur. En réalité, Blender ne peut appliquer une force qu'au centre de gravité d'un objet. Nous avons donc rajouté les couples correspondant pour appliquer ces forces aux bons endroits. Nous avons donc la possibilité de piloter les quatres moteurs de façon indépendante, ce qui permettra à l'avenir de réaliser un véritable asservissement comme sur le modèle réel.
Pour permettre un pilotage plus naturel, nous avons implémenté un comportement avancé, qui permet d'agir sur les quatres moteurs avec des actions comme "monter", "descendre", "droite", "gauche" ... ainsi qu'un pilotage grâce à un joystick.
Nous avons également implémenté une aide au pilotage minimale, qui permet de stabiliser le quadricoptère quand aucune touche n'est enfoncée.
Durant ce projet, nous avons rencontré des soucis mineurs avec le moteur de jeux de Blender, que nous avons soit corrigés nous même (patch envoyé aux développeurs), soit signalés sur le bugtracker du projet.


</REALISATION>
<CONTACT>michael.mure@uha.fr</CONTACT>
<CONTACT>benoit.saccomano@gmail.com</CONTACT>














